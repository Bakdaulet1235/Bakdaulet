пакет com.project.rr;

public class Main {
    частный статический int QuantumTime = 2;
    частный статический int total;
    public static void main (String args []) {
        RoundRobin roundRobin = getRoundRobin ();
        запустить (roundRobin);
    }
    public static void run (RoundRobin roundRobin) {
        int bt [] = новый int [roundRobin.getCapacity ()];
        int at [] = новый int [roundRobin.getCapacity ()];
        for (int i = 0; i <roundRobin.getCapacity (); i ++) {
            bt [i] = roundRobin.processes [i] .getBurstTime ();
            at [я] = roundRobin.processes [я] .getArrivalTime ();
        }
        getAvgTime (roundRobin, roundRobin.getCapacity (), bt, QuantumTime, at);
    }

    public static void getWaitingTime (int waitTime [], int n, int burstTime [], int QuantTime, int completedTime [], int arrivalTime []) {
        int coPy [] = новый int [n];
        for (int i = 0; i <waitTime.length; i ++) {
            coPy [i] = burstTime [i];
        }
        int time = 0;
        int прибытия = 0;
        while (true) {
            логическое isTrue = true;
            for (int i = 0; i <n; i ++) {
                if (coPy [i]> 0) {
                    isTrue = false;
                    if (coPy [i]> QuantumTime && Время прибытия [i] <= прибытие) {
                        время + = QuantumTime;
                        coPy [i] - = QuantumTime;
                        прибытие ++;
                    }
                    else {
                        if (Время прибытия [i] <= прибытие) {
                            прибытие ++;
                            время + = coPy [i];
                            coPy [i] = 0;
                            Время завершения [i] = время;
                        }
                    }
                }
            }

            если (isTrue == true)
            {
                сломать;
            }
        }
    }
    public static void getTurnAroundTime (int waitTime [], int n, int burstTime [], int turnAroundTime [], int completedTime [], int arrivalTime []) {
        for (int i = 0; i <n; i ++) {
            turnAroundTime [i] = Время завершения [i] -arrivalTime [i];
            waitTime [i] = turnAroundTime [i] -burstTime [i];
        }

    }

    public static void getAvgTime (RoundRobin roundRobin, int n, int burstTime [], int QuantTime, int arrivalTime []) {
        int wt [] = новый int [n];
        int tat [] = новый int [n];
        int cT [] = новый int [n];
        getWaitingTime (wt, n, burstTime, QuantTime, cT, прибытие);
        getTurnAroundTime (wt, n, burstTime, tat, cT, Время прибытия);
        двойная summaWT = 0, summaTAT = 0;
        System.out.println («Процесс» + «AT» + «BT» + «CT» + «TAT» + «WT»);
        for (int i = 0; i <n; i ++) {
            summaWT + = wt [i];
            summaTAT + = tat [i];
            System.out.println (roundRobin.processes [i] .getName () + "" + arrivalTime [i] + "" + + burstTime [i] + "" + cT [i] + ""
                    + тат [я] + "" + вес [я]);
        }
        System.out.println ("Орташа куту уакыты ==" + summaWT / n);
        System.out.println ("Орташа айналым уакыты ==" + summaTAT / n);
    }

    public static RoundRobin getRoundRobin () {
        RoundRobin roundRobin = новый RoundRobin (4);
        roundRobin.processes [0] = новый процесс ("Процес1", 0, 5);
        roundRobin.processes [1] = новый процесс ("Процес2", 2, 5);
        roundRobin.processes [2] = новый процесс ("Процес3", 4, 2);
        roundRobin.processes [3] = новый процесс ("Процес4", 6, 9);
        return roundRobin;
    }
}
